package org.antinori.game;

import static org.antinori.game.Card.ROOM_BALLROOM;
import static org.antinori.game.Card.ROOM_BILLIARD;
import static org.antinori.game.Card.ROOM_CONSERVATORY;
import static org.antinori.game.Card.ROOM_DINING;
import static org.antinori.game.Card.ROOM_HALL;
import static org.antinori.game.Card.ROOM_KITCHEN;
import static org.antinori.game.Card.ROOM_LIBRARY;
import static org.antinori.game.Card.ROOM_LOUNGE;
import static org.antinori.game.Card.ROOM_STUDY;
import static org.antinori.game.Card.SUSPECT_GREEN;
import static org.antinori.game.Card.SUSPECT_MUSTARD;
import static org.antinori.game.Card.SUSPECT_PEACOCK;
import static org.antinori.game.Card.SUSPECT_PLUM;
import static org.antinori.game.Card.SUSPECT_SCARLET;
import static org.antinori.game.Card.SUSPECT_WHITE;
import static org.antinori.game.Card.TYPE_ROOM;
import static org.antinori.game.Card.TYPE_SUSPECT;
import static org.antinori.game.Card.TYPE_WEAPON;
import static org.antinori.game.Card.WEAPON_CANDLE;
import static org.antinori.game.Card.WEAPON_KNIFE;
import static org.antinori.game.Card.WEAPON_PIPE;
import static org.antinori.game.Card.WEAPON_REVOLVER;
import static org.antinori.game.Card.WEAPON_ROPE;
import static org.antinori.game.Card.WEAPON_WRENCH;

import java.util.ArrayList;

public class PickCardsToShowDialog2 extends javax.swing.JDialog {

	public PickCardsToShowDialog2(final ArrayList<Card> suggestion, final String suggestion_text, final Player player) {

		this.suggestion = suggestion;
		this.player = player;

		this.setModal(true);
		this.setUndecorated(true);
		ClueMain.setLocationInCenter(this, -200, -200);

		this.initComponents();

		this.suggestion_ta.setText(player.getPlayerName() + ", pick a card to show\naccording to the suggestion.\n\n" + suggestion_text);

		final ArrayList<Card> cards_in_hand = player.getCardsInHand();

		boolean has_a_card = false;

		for (final Card card : cards_in_hand) {

			if (!suggestion.contains(card)) {
				continue;
			}

			has_a_card = true;

			final int type = card.getType();
			final int value = card.getValue();

			if (type == TYPE_SUSPECT) {
				if (value == SUSPECT_SCARLET) {
					this.scarlet_rb.setEnabled(true);
				}
				if (value == SUSPECT_MUSTARD) {
					this.mustard_rb.setEnabled(true);
				}
				if (value == SUSPECT_GREEN) {
					this.green_rb.setEnabled(true);
				}
				if (value == SUSPECT_PLUM) {
					this.plum_rb.setEnabled(true);
				}
				if (value == SUSPECT_WHITE) {
					this.white_rb.setEnabled(true);
				}
				if (value == SUSPECT_PEACOCK) {
					this.peacock_rb.setEnabled(true);
				}
			} else if (type == TYPE_WEAPON) {
				if (value == WEAPON_REVOLVER) {
					this.revolver_rb.setEnabled(true);
				}
				if (value == WEAPON_PIPE) {
					this.pipe_rb.setEnabled(true);
				}
				if (value == WEAPON_ROPE) {
					this.rope_rb.setEnabled(true);
				}
				if (value == WEAPON_CANDLE) {
					this.candlestick_rb.setEnabled(true);
				}
				if (value == WEAPON_WRENCH) {
					this.wrench_rb.setEnabled(true);
				}
				if (value == WEAPON_KNIFE) {
					this.knife_rb.setEnabled(true);
				}
			} else {
				if (value == ROOM_KITCHEN) {
					this.kitchen_rb.setEnabled(true);
				}
				if (value == ROOM_BALLROOM) {
					this.ballroom_rb.setEnabled(true);
				}
				if (value == ROOM_CONSERVATORY) {
					this.conservatory_rb.setEnabled(true);
				}
				if (value == ROOM_BILLIARD) {
					this.billiard_rb.setEnabled(true);
				}
				if (value == ROOM_LIBRARY) {
					this.library_rb.setEnabled(true);
				}
				if (value == ROOM_STUDY) {
					this.study_rb.setEnabled(true);
				}
				if (value == ROOM_HALL) {
					this.hall_rb.setEnabled(true);
				}
				if (value == ROOM_LOUNGE) {
					this.lounge_rb.setEnabled(true);
				}
				if (value == ROOM_DINING) {
					this.dining_rb.setEnabled(true);
				}
			}

		}

		//let them click OK if they have no cards to show
		if (!has_a_card) {
			this.okButton.setEnabled(true);
		}

	}

	//return the data after clicking OK
	public Card showDialog() {
		this.setVisible(true);
		return this.picked_card;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		this.buttonGroup1 = new javax.swing.ButtonGroup();
		this.bg = new javax.swing.JPanel();
		this.fgPanel = new javax.swing.JPanel();
		this.scarlet_rb = new javax.swing.JRadioButton();
		this.mustard_rb = new javax.swing.JRadioButton();
		this.green_rb = new javax.swing.JRadioButton();
		this.plum_rb = new javax.swing.JRadioButton();
		this.white_rb = new javax.swing.JRadioButton();
		this.peacock_rb = new javax.swing.JRadioButton();
		this.revolver_rb = new javax.swing.JRadioButton();
		this.candlestick_rb = new javax.swing.JRadioButton();
		this.rope_rb = new javax.swing.JRadioButton();
		this.pipe_rb = new javax.swing.JRadioButton();
		this.wrench_rb = new javax.swing.JRadioButton();
		this.knife_rb = new javax.swing.JRadioButton();
		this.kitchen_rb = new javax.swing.JRadioButton();
		this.ballroom_rb = new javax.swing.JRadioButton();
		this.conservatory_rb = new javax.swing.JRadioButton();
		this.billiard_rb = new javax.swing.JRadioButton();
		this.library_rb = new javax.swing.JRadioButton();
		this.study_rb = new javax.swing.JRadioButton();
		this.hall_rb = new javax.swing.JRadioButton();
		this.lounge_rb = new javax.swing.JRadioButton();
		this.dining_rb = new javax.swing.JRadioButton();
		this.okButton = new javax.swing.JButton();
		this.suggestion_ta = new javax.swing.JTextArea();
		this.bgLabel = new javax.swing.JLabel();

		this.bg.setMinimumSize(new java.awt.Dimension(1, 1));
		this.bg.setLayout(new java.awt.GridBagLayout());

		this.fgPanel.setOpaque(false);

		this.scarlet_rb.addItemListener(new PickItemListener());
		this.mustard_rb.addItemListener(new PickItemListener());
		this.green_rb.addItemListener(new PickItemListener());
		this.plum_rb.addItemListener(new PickItemListener());
		this.white_rb.addItemListener(new PickItemListener());
		this.peacock_rb.addItemListener(new PickItemListener());

		this.revolver_rb.addItemListener(new PickItemListener());
		this.candlestick_rb.addItemListener(new PickItemListener());
		this.rope_rb.addItemListener(new PickItemListener());
		this.pipe_rb.addItemListener(new PickItemListener());
		this.wrench_rb.addItemListener(new PickItemListener());
		this.knife_rb.addItemListener(new PickItemListener());

		this.kitchen_rb.addItemListener(new PickItemListener());
		this.ballroom_rb.addItemListener(new PickItemListener());
		this.conservatory_rb.addItemListener(new PickItemListener());
		this.billiard_rb.addItemListener(new PickItemListener());
		this.library_rb.addItemListener(new PickItemListener());
		this.study_rb.addItemListener(new PickItemListener());
		this.hall_rb.addItemListener(new PickItemListener());
		this.lounge_rb.addItemListener(new PickItemListener());
		this.dining_rb.addItemListener(new PickItemListener());

		this.scarlet_rb.setEnabled(false);
		this.mustard_rb.setEnabled(false);
		this.green_rb.setEnabled(false);
		this.plum_rb.setEnabled(false);
		this.white_rb.setEnabled(false);
		this.peacock_rb.setEnabled(false);

		this.revolver_rb.setEnabled(false);
		this.candlestick_rb.setEnabled(false);
		this.rope_rb.setEnabled(false);
		this.pipe_rb.setEnabled(false);
		this.wrench_rb.setEnabled(false);
		this.knife_rb.setEnabled(false);

		this.kitchen_rb.setEnabled(false);
		this.ballroom_rb.setEnabled(false);
		this.conservatory_rb.setEnabled(false);
		this.billiard_rb.setEnabled(false);
		this.library_rb.setEnabled(false);
		this.study_rb.setEnabled(false);
		this.hall_rb.setEnabled(false);
		this.lounge_rb.setEnabled(false);
		this.dining_rb.setEnabled(false);

		this.okButton.setEnabled(false);

		this.buttonGroup1.add(this.scarlet_rb);
		this.scarlet_rb.setText("Miss Scarlet");
		this.scarlet_rb.setOpaque(false);

		this.buttonGroup1.add(this.mustard_rb);
		this.mustard_rb.setText("Colonel Mustard");
		this.mustard_rb.setOpaque(false);

		this.buttonGroup1.add(this.green_rb);
		this.green_rb.setText("Mr. Green");
		this.green_rb.setOpaque(false);

		this.buttonGroup1.add(this.plum_rb);
		this.plum_rb.setText("Professor Plum");
		this.plum_rb.setOpaque(false);

		this.buttonGroup1.add(this.white_rb);
		this.white_rb.setText("Mrs. White");
		this.white_rb.setOpaque(false);

		this.buttonGroup1.add(this.peacock_rb);
		this.peacock_rb.setText("Mrs. Peacock");
		this.peacock_rb.setOpaque(false);

		this.buttonGroup1.add(this.revolver_rb);
		this.revolver_rb.setText("Revolver");
		this.revolver_rb.setOpaque(false);

		this.buttonGroup1.add(this.candlestick_rb);
		this.candlestick_rb.setText("Candlelabra");
		this.candlestick_rb.setOpaque(false);

		this.buttonGroup1.add(this.rope_rb);
		this.rope_rb.setText("Rope");
		this.rope_rb.setOpaque(false);

		this.buttonGroup1.add(this.pipe_rb);
		this.pipe_rb.setText("Lead Pipe");
		this.pipe_rb.setOpaque(false);

		this.buttonGroup1.add(this.wrench_rb);
		this.wrench_rb.setText("Wrench");
		this.wrench_rb.setOpaque(false);

		this.buttonGroup1.add(this.knife_rb);
		this.knife_rb.setText("Knife");
		this.knife_rb.setOpaque(false);

		this.buttonGroup1.add(this.kitchen_rb);
		this.kitchen_rb.setText("Kitchen");
		this.kitchen_rb.setOpaque(false);

		this.buttonGroup1.add(this.ballroom_rb);
		this.ballroom_rb.setText("Ballroom");
		this.ballroom_rb.setOpaque(false);

		this.buttonGroup1.add(this.conservatory_rb);
		this.conservatory_rb.setText("Conservatory");
		this.conservatory_rb.setOpaque(false);

		this.buttonGroup1.add(this.billiard_rb);
		this.billiard_rb.setText("Billiard Room");
		this.billiard_rb.setOpaque(false);

		this.buttonGroup1.add(this.library_rb);
		this.library_rb.setText("Library");
		this.library_rb.setOpaque(false);

		this.buttonGroup1.add(this.study_rb);
		this.study_rb.setText("Study");
		this.study_rb.setOpaque(false);

		this.buttonGroup1.add(this.hall_rb);
		this.hall_rb.setText("Hall");
		this.hall_rb.setOpaque(false);

		this.buttonGroup1.add(this.lounge_rb);
		this.lounge_rb.setText("Lounge");
		this.lounge_rb.setOpaque(false);

		this.buttonGroup1.add(this.dining_rb);
		this.dining_rb.setText("Dining Room");
		this.dining_rb.setOpaque(false);

		this.okButton.setText("OK");
		this.okButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				PickCardsToShowDialog2.this.okButtonActionPerformed(evt);
			}
		});

		this.suggestion_ta.setColumns(20);
		this.suggestion_ta.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 14)); // NOI18N
		this.suggestion_ta.setRows(5);
		this.suggestion_ta.setText("sample text");
		this.suggestion_ta.setBorder(null);
		this.suggestion_ta.setOpaque(false);

		final org.jdesktop.layout.GroupLayout fgPanelLayout = new org.jdesktop.layout.GroupLayout(this.fgPanel);
		this.fgPanel.setLayout(fgPanelLayout);
		fgPanelLayout.setHorizontalGroup(
				fgPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(fgPanelLayout.createSequentialGroup()
						.add(18, 18, 18)
						.add(fgPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
								.add(fgPanelLayout.createSequentialGroup()
										.add(this.scarlet_rb)
										.add(55, 55, 55)
										.add(this.revolver_rb))
								.add(fgPanelLayout.createSequentialGroup()
										.add(fgPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
												.add(this.mustard_rb)
												.add(this.green_rb)
												.add(this.white_rb)
												.add(this.peacock_rb)
												.add(this.plum_rb))
										.add(33, 33, 33)
										.add(fgPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
												.add(this.candlestick_rb)
												.add(this.rope_rb)
												.add(this.pipe_rb)
												.add(this.wrench_rb)
												.add(this.knife_rb)))
								.add(this.suggestion_ta, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 232, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
						.add(18, 18, 18)
						.add(fgPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
								.add(org.jdesktop.layout.GroupLayout.TRAILING, fgPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
										.add(this.kitchen_rb, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.add(this.study_rb, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.add(this.library_rb, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.add(this.billiard_rb, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.add(this.ballroom_rb, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.add(this.conservatory_rb, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.add(this.hall_rb, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.add(this.lounge_rb, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.add(this.dining_rb, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.add(org.jdesktop.layout.GroupLayout.TRAILING, this.okButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);
		fgPanelLayout.setVerticalGroup(
				fgPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(fgPanelLayout.createSequentialGroup()
						.add(16, 16, 16)
						.add(fgPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
								.add(fgPanelLayout.createSequentialGroup()
										.add(this.kitchen_rb)
										.add(0, 0, 0)
										.add(this.ballroom_rb)
										.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
										.add(this.conservatory_rb)
										.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
										.add(this.billiard_rb)
										.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
										.add(this.library_rb)
										.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
										.add(this.study_rb)
										.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
										.add(this.hall_rb)
										.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
										.add(this.lounge_rb)
										.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
										.add(this.dining_rb)
										.add(39, 39, 39)
										.add(this.okButton))
								.add(fgPanelLayout.createSequentialGroup()
										.add(fgPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
												.add(this.scarlet_rb)
												.add(this.revolver_rb))
										.add(fgPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
												.add(fgPanelLayout.createSequentialGroup()
														.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
														.add(this.mustard_rb)
														.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
														.add(this.green_rb)
														.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
														.add(this.plum_rb)
														.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
														.add(this.white_rb)
														.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
														.add(this.peacock_rb))
												.add(fgPanelLayout.createSequentialGroup()
														.add(this.candlestick_rb)
														.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
														.add(this.rope_rb)
														.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
														.add(this.pipe_rb)
														.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
														.add(this.wrench_rb)
														.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
														.add(this.knife_rb)))
										.add(18, 18, 18)
										.add(this.suggestion_ta, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);

		this.bg.add(this.fgPanel, new java.awt.GridBagConstraints());

		this.bgLabel.setIcon(ClueMain.getImageIcon("old_frame1.png")); // NOI18N

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		this.bg.add(this.bgLabel, gridBagConstraints);

		final org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this.getContentPane());
		this.getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(this.bg, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(this.bg, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				);

		this.pack();
	}// </editor-fold>//GEN-END:initComponents

	public void okButtonActionPerformed(final java.awt.event.ActionEvent evt) {

		if (this.scarlet_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_SUSPECT, SUSPECT_SCARLET);
		}
		if (this.mustard_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_SUSPECT, SUSPECT_MUSTARD);
		}
		if (this.green_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_SUSPECT, SUSPECT_GREEN);
		}
		if (this.plum_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_SUSPECT, SUSPECT_PLUM);
		}
		if (this.white_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_SUSPECT, SUSPECT_WHITE);
		}
		if (this.peacock_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_SUSPECT, SUSPECT_PEACOCK);
		}

		if (this.revolver_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_WEAPON, WEAPON_REVOLVER);
		}
		if (this.candlestick_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_WEAPON, WEAPON_CANDLE);
		}
		if (this.rope_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_WEAPON, WEAPON_ROPE);
		}
		if (this.pipe_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_WEAPON, WEAPON_PIPE);
		}
		if (this.wrench_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_WEAPON, WEAPON_WRENCH);
		}
		if (this.knife_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_WEAPON, WEAPON_KNIFE);
		}

		if (this.kitchen_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_ROOM, ROOM_KITCHEN);
		}
		if (this.ballroom_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_ROOM, ROOM_BALLROOM);
		}
		if (this.conservatory_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_ROOM, ROOM_CONSERVATORY);
		}
		if (this.billiard_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_ROOM, ROOM_BILLIARD);
		}
		if (this.library_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_ROOM, ROOM_LIBRARY);
		}
		if (this.study_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_ROOM, ROOM_STUDY);
		}
		if (this.hall_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_ROOM, ROOM_HALL);
		}
		if (this.lounge_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_ROOM, ROOM_LOUNGE);
		}
		if (this.dining_rb.isSelected()) {
			this.picked_card = Card.getInstance(TYPE_ROOM, ROOM_DINING);
		}

		this.dispose();
	}

	class PickItemListener implements java.awt.event.ItemListener {

		@Override
		public void itemStateChanged(final java.awt.event.ItemEvent evt) {
			PickCardsToShowDialog2.this.okButton.setEnabled(true);
		}
	}

	private ArrayList<Card> suggestion;
	private Player player;
	private Card picked_card = null;

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JRadioButton ballroom_rb;
	private javax.swing.JPanel bg;
	private javax.swing.JLabel bgLabel;
	private javax.swing.JRadioButton billiard_rb;
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.JRadioButton candlestick_rb;
	private javax.swing.JRadioButton conservatory_rb;
	private javax.swing.JRadioButton dining_rb;
	private javax.swing.JPanel fgPanel;
	private javax.swing.JRadioButton green_rb;
	private javax.swing.JRadioButton hall_rb;
	private javax.swing.JRadioButton kitchen_rb;
	private javax.swing.JRadioButton knife_rb;
	private javax.swing.JRadioButton library_rb;
	private javax.swing.JRadioButton lounge_rb;
	private javax.swing.JRadioButton mustard_rb;
	private javax.swing.JButton okButton;
	private javax.swing.JRadioButton peacock_rb;
	private javax.swing.JRadioButton pipe_rb;
	private javax.swing.JRadioButton plum_rb;
	private javax.swing.JRadioButton revolver_rb;
	private javax.swing.JRadioButton rope_rb;
	private javax.swing.JRadioButton scarlet_rb;
	private javax.swing.JRadioButton study_rb;
	private javax.swing.JTextArea suggestion_ta;
	private javax.swing.JRadioButton white_rb;
	private javax.swing.JRadioButton wrench_rb;
	// End of variables declaration//GEN-END:variables

}
